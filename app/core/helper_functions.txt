<?php

// Returns the full url
function get_url()
{
    return (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
}

function starts_with($haystack, $needle)
{
    $length = strlen($needle);
    return (substr($haystack, 0, $length) === $needle);
}

function select_table($name, $value = '')
{
    global $pdo;
    global $config;
    $query = "SHOW TABLES";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    $options = '';
    $database = $config['database']['database'];
    while ($row = $stmt->fetch()) {
        $table_name = $row["Tables_in_$database"];
        $table_name_pretty = table_pretty_print($table_name);
        $selected = '';
        if ($table_name == $value) {
            $selected = 'selected';
        }
        $options .= "<option value='$table_name' $selected>$table_name_pretty</option>";
    }
    $content = <<<HTML
    <select name="$name" value="$value">
        $options
    </select>
HTML;
    return $content;
}

// Returns a more readable version of a table name
function table_pretty_print($name)
{
    $name = str_replace('_', ' ', $name);
    $name = ucwords($name);
    return $name;
}

// Returns a more readable version of a column name
function column_pretty_print($name)
{
    $name = str_replace('_', ' ', $name);
    $name = ucwords($name);
    return $name;
}

// Cleans table and column names
function db_clean($str)
{
    return preg_replace('/[^A-Za-z0-9_\\*\\.\\>\\<\\=]+/', '', $str);
}

function db_select($table, $columns, $where, $extra = '')
{
    global $pdo;
    $table = db_clean($table);
    // Clean columns
    foreach ($columns as $key => $column) {
        $columns[$key] = db_clean($column);
    }
    $columns = implode(',', $columns);
    // Construct and clean where clause
    $where_conditions = array();
    $where_values = array();
    foreach ($where as $column => $value) {
        $column = trim($column, '.');
        $column = db_clean($column);
        if ($value != null) {
            if (!is_array($value)) {
                $where_conditions[] = "$column=?";
                $where_values[] = $value;
            } elseif ($value[0] == 'IN' || $value[0] == 'NOT IN') {
                $where_conditions[] = "$column ${value[0]} (${value[1]})";
            } else {
                $where_conditions[] = "${column} ${value[0]} ?";
                $where_values[] = $value[1];
            }
        } else {
            $where_conditions[] = "$column IS NULL";
        }
    }
    $where = implode(' AND ', $where_conditions);
    // Create statement
    $query = "SELECT $columns FROM $table WHERE $where $extra";
    $stmt = $pdo->prepare($query);
    $stmt->execute($where_values);
    return $stmt;
}

function db_select_ids($table, $columns, $id_min, $id_max)
{
    global $pdo;
    $table = db_clean($table);
    // Clean columns
    foreach ($columns as $key => $column) {
        $columns[$key] = db_clean($column);
    }
    $columns = implode(',', $columns);
    // Create statement
    $query = "SELECT $columns FROM $table WHERE id >= ? AND id <= ?";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$id_min, $id_max]);
    return $stmt;
}

function db_update($table, $values, $where)
{
    global $pdo;
    $table = db_clean($table);
    // Clean columns
    $columns = [];
    $column_values = array();
    foreach ($values as $key => $value) {
        $columns[$key] = db_clean($key)."=?";
        $column_values[] = $value;
    }
    $columns = implode(', ', $columns);
    // Construct and clean where clause
    $where_conditions = array();
    $where_values = array();
    foreach ($where as $column => $value) {
        $column = db_clean($column);
        if ($value != null) {
            $where_conditions[] = "$column=?";
            $where_values[] = $value;
        } else {
            $where_conditions[] = "$column IS NULL";
        }
    }
    $where = implode(' AND ', $where_conditions);
    // Create statement
    $query = "UPDATE $table SET $columns WHERE $where";
    /*
    UPDATE table_name
    SET column1 = value1, column2 = value2, ...
    WHERE condition;
    */
    $stmt = $pdo->prepare($query);
    $stmt->execute(array_merge($column_values, $where_values));
    return $stmt;
}

function db_insert($table, $values)
{
    global $pdo;
    $table = db_clean($table);
    // Clean columns
    $columns = [];
    $column_values = array();
    $vals = array();
    foreach ($values as $key => $value) {
        $columns[$key] = db_clean($key);
        $vals[] = '?';
        $column_values[] = $value;
    }
    $columns = implode(', ', $columns);
    $vals = implode(', ', $vals);
    // Create statement
    $query = "INSERT INTO $table ($columns) VALUES ($vals)";
    $stmt = $pdo->prepare($query);
    $stmt->execute($column_values);
    return $stmt;
}

function db_get_last_insert_id()
{
    global $pdo;
    return $pdo->lastInsertId();
}

function db_remove($table, $id)
{
    global $pdo;
    $table = db_clean($table);
    // Create statement
    $query = "DELETE FROM $table WHERE id=?";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$id]);
    return $stmt;
}

function db_schema($table)
{
    global $pdo;
    global $config;
    // Get values from database
    $where = ["TABLE_NAME"=>$table,"TABLE_SCHEMA"=>$config["database"]["database"]];
    $cols = ["COLUMN_NAME","IS_NULLABLE","DATA_TYPE","CHARACTER_MAXIMUM_LENGTH","COLUMN_COMMENT"];
    $stmt = db_select("INFORMATION_SCHEMA.COLUMNS", $cols, $where);
    // Convert to usable array
    $columns = [];
    while ($row = $stmt->fetch()) {
        $column = [];
        $name = $row['COLUMN_NAME'];
        $data_type = $row['DATA_TYPE'];
        $comment = $row['COLUMN_COMMENT'];
        if ($comment != '') {
            try {
                $comment = json_decode($comment, true);
            } catch (Exception $e) {
                $comment = '';
            }
        }
        if ($comment != '') {
            $type = $comment['type'];
        } else {
            $type = $data_type;
            $comment = [];
        }
        if ($name == 'id') {
            $type = 'id';
        }
        $type = strtolower($type);
        $data_type = strtolower($data_type);
        $is_required = $row['IS_NULLABLE'] == 'NO';
        // Add data to column
        $column['name'] = $name;
        $column['data_type'] = $data_type;
        $column['type'] = $type;
        $column['data'] = $comment;
        $column['required'] = $is_required;
        // Add column to columns
        $columns[$name] = $column;
    }
    return $columns;
}

function db_table_data($table)
{
    global $pdo;
    global $config;
    // Get values from database
    $where = ["TABLE_NAME"=>$table,"TABLE_SCHEMA"=>$config["database"]["database"]];
    $cols = ["TABLE_NAME","TABLE_COMMENT"];
    $stmt = db_select("INFORMATION_SCHEMA.TABLES", $cols, $where);
    $row = $stmt->fetch();
    // Convert to usable array
    $column = [];
    $name = $row['TABLE_NAME'];
    $comment = $row['TABLE_COMMENT'];
    if ($comment != '') {
        try {
            $comment = json_decode($comment, true);
        } catch (Exception $e) {
            $comment = [];
        }
    } else {
        $comment = [];
    }
    // Add slaves
    $slaves = [];
    if (isset($comment['slaves'])) {
        $slaves = $comment['slaves'];
    }
    // Create whitelist
    $user_groups = maj_get_all_names('user_group');
    function create_whitelist($comment, $user_groups, $is_set = true)
    {
        if (!$is_set) {
            return [];
        }
        $whitelist = [];
        if (isset($comment['whitelist']) && is_array($comment['whitelist'])) {
            $whitelist = $comment['whitelist'];
        } elseif (isset($comment['blacklist'])) {
            foreach ($user_groups as $key => $user_group) {
                if (!in_array($user_group['name'], $comment['blacklist'])) {
                    $whitelist[] = $user_group['name'];
                }
            }
        } else {
            foreach ($user_groups as $key => $user_group) {
                $whitelist[] = $user_group['name'];
            }
        }
        return $whitelist;
    }
    // Add data to column
    $column['name'] = $name;
    $column['data'] = $comment;
    $column['data_raw'] = $row['TABLE_COMMENT'];
    $column['slaves'] = $slaves;
    $column['whitelist'] = create_whitelist($comment, $user_groups);
    $column['whitelist_display'] = create_whitelist(isset($comment['display']) ? $comment['display'] : [], $user_groups, isset($comment['display']), isset($comment['display']));
    $column['whitelist_edit'] = create_whitelist(isset($comment['edit']) ? $comment['edit'] : [], $user_groups, isset($comment['edit']), isset($comment['edit']));
    $column['whitelist_add'] = create_whitelist(isset($comment['add']) ? $comment['add'] : [], $user_groups, isset($comment['add']), isset($comment['add']));
    // Add column to columns
    return $column;
}

function maj_update($table, $values, $id)
{
    global $field_types;
    $schema = db_schema($table);
    $update_values = [];
    foreach ($values as $key => $value) {
        if (!starts_with($key, '-') && $key != 'id') {
            $type = $schema[$key]['type'];
            $fn = get_type_function('encode', $type);
            $value = $fn($schema[$key], $value, $values);
            $is_update_value = true;
            if (($value == '' || $value == null) && isset($field_types[$type]['config']['skip_empty']) && $field_types[$type]['config']['skip_empty']) {
                $is_update_value = false;
            }
            if ($is_update_value) {
                $update_values[$key] = $value;
            }
        }
    }
    db_update($table, $update_values, ["id"=>$id]);
}

$name_cache = [];

function maj_get_name($table, $id)
{
    if (isset($name_cache[$table][$id])) {
        return $name_cache[$table][$id];
    }
    $from_schema = db_schema($table);
    $name_key = array_slice($from_schema, 1, 1, true);
    $name_key = reset($name_key);
    $name_key = $name_key['name'];
    $stmt = db_select($table, [$name_key], ['id'=>$id]);
    $row = $stmt->fetch();
    $fn = get_type_function('decode_raw', $from_schema[$name_key]['type']);
    $name = $fn($from_schema[$name_key], $row[$name_key]);
    $name_cache[$table][$id] = $name;
    return $name;
}

function maj_get_all_names($table, $where = ['1'=>'1'])
{
    $from_schema = db_schema($table);
    $name_key = array_slice($from_schema, 1, 1, true);
    $name_key = reset($name_key);
    $name_key = $name_key['name'];
    $names = [];
    $fn = get_type_function('decode_raw', $from_schema[$name_key]['type']);
    if (isset($from_schema['sort_order'])) {
        $extra = 'ORDER BY sort_order';
    } else {
        $extra = '';
    }
    $stmt = db_select($table, ['id', $name_key], $where, $extra);
    while ($row = $stmt->fetch()) {
        $name = $fn($from_schema[$name_key], $row[$name_key]);
        $names[$row['id']] = [
            'id' => $row['id'],
            'name' => $name
        ];
    }
    return $names;
}

function get_type_function($page, $type)
{
    global $field_types;
    if (isset($field_types[$type])) {
        if (isset($field_types[$type][$page])) {
            return $field_types[$type][$page];
        }
        if ($page == 'decode') {
            global $content;
            $content .= create_error("Decode of type is not defined.\n\$field_types[$type][decode]");
        } else {
            return get_type_function('decode', $type);
        }
    }
    if ($type == 'varchar') {
        global $content;
        $content .= create_error("VARCHAR type is not defined.\n\$field_types[varchar]");
    } else {
        return get_type_function($page, 'varchar');
    }
}

function check_user_permission($whitelist)
{
    global $user;
    foreach ($user['groups'] as $group) {
        if (in_array($group, $whitelist)) {
            return true;
        }
    }
    return false;
}

function check_user_permission_force(...$whitelists)
{
    $deny = true;
    foreach ($whitelists as $whitelist) {
        if (check_user_permission($whitelist)) {
            $deny = false;
        }
    }
    if ($deny) {
        die(get_403());
    }
}

function get_multi_select_names($from, $ids)
{
    $values = [];
    if ($ids != null) {
        $values = explode(',', $ids);
    }
    $names = [];
    foreach ($values as $value) {
        $name = maj_get_name($from, $value);
        $names[$value] = $name;
    }
    return $names;
}

function remove_directory($dirPath)
{
    if (! is_dir($dirPath)) {
        return;
    }
    if (substr($dirPath, strlen($dirPath) - 1, 1) != '/') {
        $dirPath .= '/';
    }
    $files = glob($dirPath . '*', GLOB_MARK);
    foreach ($files as $file) {
        if (is_dir($file)) {
            remove_directory($file);
        } else {
            unlink($file);
        }
    }
    rmdir($dirPath);
}

function is_assoc(array $arr)
{
    if (array() === $arr) {
        return false;
    }
    return array_keys($arr) !== range(0, count($arr) - 1);
}

function get_404()
{
    return get_page_error('404', 'Page not found');
}

function get_403()
{
    return get_page_error('403', 'Forbidden', 'You do not have permission to view this page.');
}

function get_page_error($code, $message = '', $stack_message = '')
{
    global $config;
    global $update_host;
    $theme = $config['theme'] ? $config['theme'] : 'blue-vertical';
    $content = <<<HTML
  <!DOCTYPE html>
  <html>
      <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Error - $code</title>
          <link href="$update_host/cdn/Minton/Admin/plugins/switchery/switchery.min.css" rel="stylesheet" />
          <link href="$update_host/cdn/Minton/Admin/$theme/assets/css/bootstrap.min.css" rel="stylesheet" type="text/css">
          <link href="$update_host/cdn/Minton/Admin/$theme/assets/css/icons.css" rel="stylesheet" type="text/css">
          <link href="$update_host/cdn/Minton/Admin/$theme/assets/css/style.css" rel="stylesheet" type="text/css">
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/modernizr.min.js"></script>
      </head>
      <body>
          <div class="ex-page-content">
              <div class="container">
                  <div class="row">
                      <div class="col-lg-6">
                          <svg class="svg-box" width="380px" height="500px" viewBox="0 0 837 1045" version="1.1"
                               xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                               xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">
                              <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"
                                 sketch:type="MSPage">
                                  <path d="M353,9 L626.664028,170 L626.664028,487 L353,642 L79.3359724,487 L79.3359724,170 L353,9 Z"
                                        id="Polygon-1" stroke="#3bafda" stroke-width="6" sketch:type="MSShapeGroup"></path>
                                  <path d="M78.5,529 L147,569.186414 L147,648.311216 L78.5,687 L10,648.311216 L10,569.186414 L78.5,529 Z"
                                        id="Polygon-2" stroke="#7266ba" stroke-width="6" sketch:type="MSShapeGroup"></path>
                                  <path d="M773,186 L827,217.538705 L827,279.636651 L773,310 L719,279.636651 L719,217.538705 L773,186 Z"
                                        id="Polygon-3" stroke="#f76397" stroke-width="6" sketch:type="MSShapeGroup"></path>
                                  <path d="M639,529 L773,607.846761 L773,763.091627 L639,839 L505,763.091627 L505,607.846761 L639,529 Z"
                                        id="Polygon-4" stroke="#00b19d" stroke-width="6" sketch:type="MSShapeGroup"></path>
                                  <path d="M281,801 L383,861.025276 L383,979.21169 L281,1037 L179,979.21169 L179,861.025276 L281,801 Z"
                                        id="Polygon-5" stroke="#ffaa00" stroke-width="6" sketch:type="MSShapeGroup"></path>
                              </g>
                          </svg>
                      </div>

                      <div class="col-lg-6">
                          <div class="message-box">
                              <h1 class="m-b-0">$code</h1>
                              <h6>$message</h6>
                              <div class="buttons-con">
                                  <div class="action-link-wrap">
                                      <a onclick="history.back(-1)" href="Javascript:void(0);" class="btn btn-custom btn-primary waves-effect waves-light m-t-20">Go Back</a>
                                      <a href="?p=home" class="btn btn-custom btn-primary waves-effect waves-light m-t-20">Go to Home Page</a>
                                  </div>
                              </div>
                              <br />
                              <p>$stack_message</p>
                          </div>
                      </div>
                  </div>
              </div>
          </div>



      <script>
              var resizefunc = [];
          </script>

          <!-- Plugins  -->
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.min.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/popper.min.js"></script><!-- Popper for Bootstrap -->
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/bootstrap.min.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/detect.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/fastclick.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.slimscroll.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.blockUI.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/waves.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/wow.min.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.nicescroll.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.scrollTo.min.js"></script>
          <script src="$update_host/cdn/Minton/Admin/plugins/switchery/switchery.min.js"></script>

          <!-- Custom main Js -->
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.core.js"></script>
          <script src="$update_host/cdn/Minton/Admin/$theme/assets/js/jquery.app.js"></script>

      </body>
  </html>
HTML;
    return $content;
}
